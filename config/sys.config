%% -*- mode: erlang -*-
[
    {simple_bridge, [

        {handler, nitrogen},
        %% the name of the simple_bridge handler module, which should not
        %% change unless you're doing something custom to set up the context
        %% and simple_bridge, and also to interact with the request in a
        %% non-standard way. Generally speaking, it's not recommended to change
        %% this unless you really know what you are doing.

        {backend, cowboy},
        %% cowboy | inets | mochiweb | webmachine | yaws

        {address, "0.0.0.0"},
        %% IP address to bind, either in tuple format or string

        {port, 8000},
        %% Port to bind

        {document_root, "./priv/static"},
        %% The path on the local machine to handle static files

        {static_paths, ["js/", "css/", "images/", "nitrogen/", "favicon.ico"]},
        %% The list of paths to be automatically translated to static paths by simple_bridge

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %% FILE UPLOAD SETTINGS
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        {max_post_size, 10},
        %% No multipart request greater than above will be accepted. Units are
        %% MB

        {max_file_size, 10},
        %% No single uploaded file will be accepted greater than the above.
        %% Units are MB.

        {max_file_in_memory_size,  0},
        %% If a file is less than the above, then instead of writing the file
        %% to disk, it'll be retained in memory and can be retrieved by
        %% sb_uploaded_file:data/1. See the README for more info.

        {scratch_dir, "./scratch"},
        %% This is the location of the temp directory where uploaded files will
        %% be placed.

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %% cowboy-SPECIFIC DISPATCH TABLES:
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        %% {webmachine_dispatch, DispatchTable},
        %% Webmachine dispatch table override (ignores static_paths above)

        %% {webmachine_dispatch_fun, {Module, Function}}
        %% A Module:Function() that when evaluated will return a dispatch table
        %% for Webmachine, again ignores the static_paths above

        %% {cowboy_dispatch, DispatchTable}
        %% Cowboy dispatch table override (ignores static_paths)

        {cowboy_dispatch_fun, {nitrogen_dispatch, init_dispatch}}
        %% A Module:Function() that when evaluated will return a dispatch table
        %% for Cowboy, again ignoring the static_paths above
    ]},

    {nitrogen, [
        % If a signkey is not specified, then Nitrogen uses the Erlang cookie.
        % {signkey, "SECRET"},

        % Default session timeout is 20 minutes.
        % {session_timeout, 20},

        % Specify a session cookie name. Uses "wf" by default.
        % {cookie_name, "wf"}

        % Setting the module_prefix to anything other than "" will change the
        % behaviour of the dynamic route handler (the default route handler) to
        % prefix page modules with it's value followed by an underscore.  For
        % example, setting module_prefix to "web" will make your page module
        % for "/mypage" be called "web_mypage".
        % {module_prefix, ""}
    ]},

    %% lager logging configuration
    {lager, [
        {log_root, "log"},
        {handlers, [
            {lager_console_backend, info},
            {lager_common_test_backend, debug},
            {lager_file_backend, [{file, "error.log"}, {level, error}]},
            {lager_file_backend, [{file, "console.log"}, {level, info}]}
        ]},
        {error_logger_hwm, 500}
    ]},

    {sync, [

        %% growl: Desktop notifications
        %% valid values: all | none | [success | warning | error]
        %% default: all
        {growl, all},

        %% log: Console notifications
        %% valid values: all | none | [success | warnings | errors]
        %% default: all
        {log, all},

        %% non_descendant: How to handle beams whose original source path is
        %% not a descendant of the current working directory.
        %%
        %% valid values: fix | allow | ignore
        %% * fix = attempt to find source files under current directory
        %% * allow = don't do anything special, use the non-descendant path and
        %%   watch that file
        %% * ignore = don't watch that module at all and ignore any changes to
        %%   its source path
        %% default: fix
        {non_descendant, fix},

        %% whitelisted_modules: Sync only these modules
        %% default: []
        {whitelisted_modules, []},

        %% excluded_modules: Ignore any modules listed
        %% default: []
        {excluded_modules, []},

        %% executable: Identify the program that you want run by the "growl" notifications
        %% valid values: auto | notifu | 'notify-send' | growlnotify | emacsclient
        %% * auto = allow sync to autodetect which program to run
        %% * growlnotify = Use Growl for Mac
        %% * notification_center = Use Notification Center in Mac OS X
        %% * 'notify-send' = Use libnotify for Linux
        %% * notifu = The notifu program for Windows
        %% * emacsclient = Emacs notifications
        %% default: auto
        {executable, auto}
    ]}
].
